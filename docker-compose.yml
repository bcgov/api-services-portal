version: '3.8'

x-common-variables: &common-variables
  KONG_DATABASE: postgres
  KONG_PG_DATABASE: kong
  KONG_PG_HOST: kong-db
  KONG_PG_USER: konguser
  KONG_PG_PASSWORD: konguser

services:
  keycloak:
    image: jboss/keycloak:11.0.3
    container_name: keycloak
    hostname: keycloak
    depends_on:
      - kong-db
    command:
      [
        '-b',
        '0.0.0.0',
        '-Djboss.socket.binding.port-offset=1000',
        '-Dkeycloak.migration.action=import',
        '-Dkeycloak.migration.provider=singleFile',
        '-Dkeycloak.migration.file=/tmp/realm-config/master-realm.json',
        '-Dkeycloak.migration.strategy=OVERWRITE_EXISTING',
        '-Dkeycloak.profile.feature.upload_scripts=enabled',
      ]
    ports:
      - 9080:9080/tcp
    environment:
      #KEYCLOAK_USER: local
      #KEYCLOAK_PASSWORD: local
      DB_VENDOR: POSTGRES
      DB_SCHEMA: public
      DB_ADDR: kong-db:5432
      DB_USER: keycloakuser
      DB_PASSWORD: keycloakuser
    volumes:
      - ./local/keycloak/master-realm.json:/tmp/realm-config/master-realm.json
    networks:
      aps-net:
        aliases:
          - keycloak.localtest.me
  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.1.3
    container_name: oauth2-proxy
    command: --config ./oauth2-proxy.cfg
    depends_on:
      - keycloak
    ports:
      - 4180:4180/tcp
    volumes:
      - ./local/oauth2-proxy/oauth2-proxy-local.cfg:/oauth2-proxy.cfg
    restart: unless-stopped
    env_file:
      - .env.local
    networks:
      aps-net:
        aliases:
          - oauth2proxy.localtest.me
  apsportal:
    container_name: apsportal
    image: apsportal:latest
    depends_on:
      - keycloak
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env.local
    ports:
      - 3000:3000
    networks:
      aps-net:
        aliases:
          - apsportal.localtest.me
  feeder:
    container_name: feeder
    image: feeder:latest
    depends_on:
      - oauth2-proxy
    build:
      context: ./feeds
      dockerfile: Dockerfile
    env_file:
      - ./feeds/.env.local
    restart: on-failure
    ports:
      - 6000:6000
    networks:
      aps-net:
        aliases:
          - feeder.localtest.me
  feeder-seeding:
    container_name: feeder-seeding
    image: feeder:latest
    command: ''
    entrypoint: sh -c "chmod +x /tmp/init.sh && sh /tmp/init.sh"
    restart: on-failure
    depends_on:
      - feeder
    volumes:
      - ./local/feeder-init:/tmp
    networks:
      - aps-net
  # cypress:
  #   image: aps-cypress-e2e:latest
  #   container_name: cypress-e2e
  #   entrypoint: sh -c "chmod +x /tmp/entrypoint.sh && /tmp/entrypoint.sh"
  #   environment:
  #     - CYPRESS_RECORD_KEY=${CY_RECORD_KEY}
  #     - CYPRESS_PROJECT_ID=${CY_PROJECT_ID}
  #     - RUN_ENV=${CY_EXECUTION_ENV}
  #     - COMMIT_INFO_BRANCH=${CY_COMMIT_BRANCH}
  #     - COMMIT_INFO_SHA=${CY_COMMIT_SHA}
  #     - COMMIT_INFO_AUTHOR=${CY_COMMIT_AUTHOR}
  #     - COMMIT_INFO_MESSAGE=${CY_COMMIT_MESSAGE}
  #     - COMMIT_INFO_REMOTE=${CY_REPO_URL}
  #     - COMMIT_INFO_EMAIL=${CY_COMMIT_AUTHOR_EMAIL}
  #   depends_on:
  #     - feeder-seeding
  #   build:
  #     context: ./e2e
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./e2e/results/report:/e2e/results/report
  #   networks:
  #     - aps-net
  kong-db:
    image: postgres:12.8
    container_name: kong-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    restart: on-failure
    tty: true
    ports:
      - 5432:5432
    volumes:
      - ./local/db/database-init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./local/db/keystone-init.sql:/docker-entrypoint-initdb.d/2-init.sql
    networks:
      - aps-net
  kong-migrations:
    image: kong:latest
    command: kong migrations bootstrap
    depends_on:
      - kong-db
    environment: *common-variables
    networks:
      - aps-net
    restart: on-failure
  kong-migrations-up:
    image: kong:latest
    command: kong migrations up && kong migrations finish
    depends_on:
      - kong-db
    environment: *common-variables
    networks:
      - aps-net
    restart: on-failure
  kong:
    image: kong:latest
    container_name: kong
    depends_on:
      - kong-migrations
      - kong-migrations-up
    build:
      context: local/kong
      dockerfile: Dockerfile
    environment:
      <<: *common-variables
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_CASSANDRA_CONTACT_POINTS: kong-db
      KONG_NGINX_WORKER_PROCESSES: '1'
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - 8000:8000
      - 8001:8001
    networks:
      aps-net:
        aliases:
          - kong.localtest.me
    restart: on-failure:5
  redis:
    image: bitnami/redis:latest
    container_name: redis
    environment:
      - REDIS_PASSWORD=s3cr3t
    restart: on-failure
    ports:
      - 6379:6379
    networks:
      aps-net:
        aliases:
          - redis.localtest.me
  gwa-api:
    image: gwa-api:e2e
    container_name: gwa-api
    entrypoint: sh -c "chmod +x /tmp/gwa/entrypoint.sh && sh /tmp/gwa/entrypoint.sh"
    ports:
      - 2000:2000
    env_file:
      - ./local/gwa-api/.env.local
    restart: on-failure:5
    volumes:
      - ./local/gwa-api:/tmp/gwa
    networks:
      aps-net:
        aliases:
          - gwa-api.localtest.me
networks:
  aps-net: {}
